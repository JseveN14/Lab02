Jessica Neves
CSC 201
2/26/2016
Lab 02

Simple Calculator

The goal of this lab was to create a program that acted like a calcultor. This lab asked us to explore slicing strings. We practiced methods with strings such as find, replace, and append. We were guided through breaking down a "hard coded" mathematic expression and "extracting" the numbers on either side of the operator. Once we accomplished that, we were instructed to explore how to handle invalid expressions. This would include mistypes such as missing values on either side of the operator and operators that were not recognized. We then had to put our program in a while loop and give the user an option to exit the program. The last section of the lab was to create a memory bank to recall previous expressions, as well as get the program to recognize parentheses.

Variables:
   - expr: String type; stores the user input expressions and commands.
   - memory_bank: List type with string elements. 
   - first_number: Integer type; "extracted" from expr
   - second_number: Integer type; "extracted" from expr
   - calculation: Integer type; Sum, difference, product, or quotient
   - answer: String type; using the insert method, each new answer is added to memory_bank

This lab was much more straightforward than the previous one. The basic algorithm for this program was to ask the user for an input (mathematic expression), to use the find method to locate the operator and store the indexes before and after seperate integers, to store the corresponding calculation, to store the whole problem and answer as a string, and then add it to a memory bank to be recalled at a later time.

I was able to accomplish the initial extraction, and creating the memory bank without much difficulty. I found the memory bank to be the easiest part of this assignment. While the handout listed that we might need to use the replace method, I found the insert method also worked well for this program. I created an empty list, and added each answer to it in the [0] index. I could tell the memory bank to only display the first 3 elements, so each time a new element was added, the list would automatically shift.

I would imagine that in order to evaluate expressions with multiple grouping symbols, it could be possible to evaluate each grouped expression first, storing each of those values, and then applying the operator in the middle. This would also require that the code for each operator is in the order of mathematical priority (PEMDAS), as I wrote them as elif conditions.

The biggest challenge for me was getting the program to recognize parentheses, and handling mistypes such as incorrect operators or non-integers. In getting my program to recognize parentheses I used a while loop with a number of 'or' conditions. It seemed like each time I created a new condition to check, there was another condition I had not considered that would crash my program. So I did my best to include as many of the parenthetic combinations as I could think of. The most common issue I seem to have thus far with programming is avoiding my program crashing from user input. The issue is that eventually down the line in my code, I need to use the input that was given in a different form than when I received it, for example string to integer. There seems to be no feasible way around this. This program will crash if the user types a string of letters with an operator in the middle. I have not found a way to avoid this sort of failure. 